
// 从滤波到三角化到求面积
#include <pcl/point_types.h>
#include <pcl/io/io.h>
#include <pcl/io/pcd_io.h>
#include <pcl/visualization/cloud_viewer.h>
#include <pcl/filters/radius_outlier_removal.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/filters/statistical_outlier_removal.h>
#include <pcl/surface/mls.h>
#include <pcl/features/normal_3d.h>
#include <pcl/surface/gp3.h>
#include <pcl/surface/poisson.h> 
#include <pcl/io/obj_io.h>


///////////////////////加入了最小二乘法
#include <pcl/point_types.h>    
#include <pcl/io/ply_io.h>  
#include <pcl/io/obj_io.h>
#include <pcl/PolygonMesh.h>
#include <pcl/io/vtk_lib_io.h>
#include <pcl/kdtree/kdtree_flann.h>  
#include <pcl/features/normal_3d.h>    
#include <pcl/visualization/pcl_visualizer.h>  
#include <boost/thread/thread.hpp>  
#include <fstream>  
#include <iostream>  
#include <stdio.h>  
#include <string.h>  
#include <string>  

////我添加了求叶面积的代码
#include <vtkOBJReader.h>
#include <vtkTriangleFilter.h>
#include <vtkSmartPointer.h>
#include <vtkMassProperties.h>
using namespace std;
/////


typedef pcl::PointXYZRGB  PointT;
typedef pcl::PointCloud<PointT> PointCloudT;


int main(int argc, char** argv)
{

	// Load input file
	pcl::PointCloud<PointT>::Ptr cloud(new pcl::PointCloud<PointT>);
	pcl::PointCloud<PointT>::Ptr cloud_downSampled(new pcl::PointCloud<PointT>);
	pcl::PointCloud<PointT>::Ptr cloud_filtered(new pcl::PointCloud<PointT>);
	pcl::PointCloud<PointT>::Ptr cloud_smoothed(new pcl::PointCloud<PointT>);
	if (pcl::io::loadPCDFile("shengzhangdian.pcd", *cloud) == -1)
	{
		cout << "点云数据读取失败！" << endl;
	}

	std::cout << "Orginal points number: " << cloud->points.size() << std::endl;

	// ----------------------开始你的代码--------------------------//
	// 请参考之前文章中点云下采样，滤波、平滑等内容，以及PCL官网实现以下功能。代码不难。

	// 下采样
	pcl::VoxelGrid<PointT> downSampled;  //创建滤波对象
	downSampled.setInputCloud(cloud);            //设置需要过滤的点云给滤波对象
	downSampled.setLeafSize(0.01f, 0.01f, 0.01f);  //设置滤波时创建的体素体积为1cm的立方体
	downSampled.filter(*cloud_downSampled);           //执行滤波处理，存储输出
	//pcl::io::savePCDFile("2-2.pcd", *cloud_downSampled);

	// 统计滤波
	pcl::StatisticalOutlierRemoval<PointT> statisOutlierRemoval;       //创建滤波器对象
	statisOutlierRemoval.setInputCloud(cloud_downSampled);            //设置待滤波的点云
	statisOutlierRemoval.setMeanK(50);                                //设置在进行统计时考虑查询点临近点数
	statisOutlierRemoval.setStddevMulThresh(1.0);                     //设置判断是否为离群点的阀值:均值+1.0*标准差
	statisOutlierRemoval.filter(*cloud_filtered);                     //滤波结果存储到cloud_filtered
	//pcl::io::savePCDFile("2-3.pcd", *cloud_filtered);

	//接着 我进行了最小二乘法去拟合叶片 
	// 创建 KD-Tree
	pcl::search::KdTree<pcl::PointXYZRGB>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGB>);

	// Output has the PointNormal type in order to store the normals calculated by MLS
	pcl::PointCloud<pcl::PointXYZRGB> mls_points;

	// 定义最小二乘实现的对象mls
	pcl::MovingLeastSquares<pcl::PointXYZRGB, pcl::PointXYZRGB> mls;
	mls.setComputeNormals(true);  //设置在最小二乘计算中需要进行法线估计
	// Set parameters
	mls.setInputCloud(cloud_filtered);
	mls.setPolynomialFit(true);
	mls.setSearchMethod(tree);
	mls.setSearchRadius(0.03);
	// Reconstruct
	mls.process(mls_points);
	// Save output   这个得到的是最小二乘法的拟合后的点云
	pcl::io::savePCDFile("2-4.pcd", mls_points);


	//这里是我加的三角化代码  ，哭了，我加不上，算了，那个另外写吧
	////////////////////////////////////////////////////////////////
	//pcl::PointCloud<pcl::PointXYZ>::Ptr mlscloud(new pcl::PointCloud<pcl::PointXYZ>);
	typedef pcl::PointXYZ PointT;
	typedef pcl::PointCloud<PointT> PointCloudT;
	PointCloudT::Ptr mlscloud(new PointCloudT);
	if (pcl::io::loadPCDFile<pcl::PointXYZ>("2-4.pcd", *mlscloud) == -1)
	{
		PCL_ERROR("Couldn't read file \n");
		return (-1);
	}

	//if (pcl::io::loadPCDFile<pcl::PointXYZ>("2-4.pcd", *mlscloud) == -1)
	//{
	//	PCL_ERROR("Cloudn't read file!");
	//	return -1;
	//}


	cout << "there are " << mlscloud->points.size() << " afer mls" << endl;

	// 估计法向量  
	pcl::NormalEstimation<pcl::PointXYZ, pcl::Normal> n;
	pcl::PointCloud<pcl::Normal>::Ptr normals(new pcl::PointCloud<pcl::Normal>);
	pcl::search::KdTree<pcl::PointXYZ>::Ptr tree_1(new pcl::search::KdTree<pcl::PointXYZ>);
	tree_1->setInputCloud(mlscloud);
	n.setInputCloud(mlscloud);
	n.setSearchMethod(tree_1);
	n.setKSearch(20);
	n.compute(*normals); //计算法线，结果存储在normals中  
	//* normals 不能同时包含点的法向量和表面的曲率  
	//将点云和法线放到一起  
	pcl::PointCloud<pcl::PointNormal>::Ptr cloud_with_normals(new pcl::PointCloud<pcl::PointNormal>);
	pcl::concatenateFields(*mlscloud, *normals, *cloud_with_normals);
	//* cloud_with_normals = cloud + normals  
	//创建搜索树  
	pcl::search::KdTree<pcl::PointNormal>::Ptr tree2(new pcl::search::KdTree<pcl::PointNormal>);
	tree2->setInputCloud(cloud_with_normals);
	

	//初始化GreedyProjectionTriangulation对象，并设置参数  
	pcl::GreedyProjectionTriangulation<pcl::PointNormal> gp3;
	//创建多变形网格，用于存储结果  
	pcl::PolygonMesh triangles;

	//设置GreedyProjectionTriangulation对象的参数  
	//第一个参数影响很大  
	gp3.setSearchRadius(200.0f);           //设置连接点之间的最大距离（最大边长）用于确定k近邻的球半径【默认值 0】  
	gp3.setMu(2.5f);                       //设置最近邻距离的乘子，以得到每个点的最终搜索半径【默认值 0】  
	gp3.setMaximumNearestNeighbors(100);   //设置搜索的最近邻点的最大数量  
	gp3.setMaximumSurfaceAngle(M_PI / 4);  // 45 degrees（pi）最大平面角  
	gp3.setMinimumAngle(M_PI / 18);        // 10 degrees 每个三角的最小角度  
	gp3.setMaximumAngle(2 * M_PI / 3);     // 120 degrees 每个三角的最大角度  
	gp3.setNormalConsistency(false);       //如果法向量一致，设置为true  

	//设置搜索方法和输入点云  
	gp3.setInputCloud(cloud_with_normals);
	gp3.setSearchMethod(tree2);

	//执行重构，结果保存在triangles中  
	gp3.reconstruct(triangles);

	//保存网格图  
	//pcl::io::saveOBJFile("result.obj", triangles);
	pcl::io::saveOBJFile("201.obj", triangles);

	vtkSmartPointer<vtkOBJReader> reader = vtkSmartPointer<vtkOBJReader>::New();
	reader->SetFileName("201.obj");
	reader->Update();

	vtkSmartPointer< vtkTriangleFilter > triangleFilter = vtkSmartPointer< vtkTriangleFilter >::New();
	triangleFilter->SetInputData(reader->GetOutput());
	triangleFilter->Update();

	vtkSmartPointer<vtkMassProperties> polygonProperties = vtkSmartPointer< vtkMassProperties >::New();
	polygonProperties->SetInputData(triangleFilter->GetOutput());
	polygonProperties->Update();


	double vol = polygonProperties->GetVolume();
	double area = polygonProperties->GetSurfaceArea();

	cout << vol << "	" << area << endl;
	

	// 显示结果图  
	boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer(new pcl::visualization::PCLVisualizer("3D Viewer"));
	viewer->setBackgroundColor(0, 0, 0);                  //设置背景  
	viewer->addPolygonMesh(triangles, "my");              //设置显示的网格
	//设置网格模型显示模式
	//viewer->setRepresentationToSurfaceForAllActors();   //网格模型以面片形式显示
	//viewer->setRepresentationToPointsForAllActors();    //网格模型以点形式显示
	viewer->setRepresentationToWireframeForAllActors();   //网格模型以线框图模式显示
	viewer->addCoordinateSystem(1.0);                     //设置坐标系  
	viewer->initCameraParameters();
	while (!viewer->wasStopped()) {
		viewer->spinOnce(100);
		boost::this_thread::sleep(boost::posix_time::microseconds(100000));
	}

	return (0);
}




